import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './MeetingList.css';\nimport apiService from '../services/apiService';\n\nconst MeetingList = () => {\n  const navigate = useNavigate();\n  const [meetings, setMeetings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [searchText, setSearchText] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [totalCount, setTotalCount] = useState(0);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const itemsPerPage = 10;\n\n  const fetchMeetings = async (page = 1, searchParams = {}) => {\n    try {\n      setLoading(true);\n      setError('');\n      \n      const params = {\n        page: page,\n        limit: itemsPerPage\n      };\n\n      // Add search parameters if they exist\n      if (searchText.trim()) {\n        params.search = searchText.trim();\n      }\n      if (statusFilter.trim()) {\n        params.status = statusFilter.trim();\n      }\n\n      // Override with any passed search params\n      Object.assign(params, searchParams);\n      \n      const response = await apiService.getMeetings(params);\n      \n      // Handle API response format\n      let meetingsData = [];\n      let totalPagesData = 1;\n      let totalCountData = 0;\n      \n      if (response && response.meetings && Array.isArray(response.meetings)) {\n        meetingsData = response.meetings;\n        totalCountData = response.totalCount || response.meetings.length;\n        totalPagesData = response.totalPages || Math.ceil(totalCountData / itemsPerPage);\n      } else {\n        throw new Error('Unexpected response format from server');\n      }\n      \n      setMeetings(meetingsData);\n      setTotalPages(totalPagesData);\n      setTotalCount(totalCountData);\n      setCurrentPage(page);\n      \n    } catch (apiError) {\n      setError(`Failed to load meetings: ${apiError.message}`);\n      setMeetings([]);\n      setTotalCount(0);\n      setTotalPages(1);\n    } finally {\n      setLoading(false);\n      setIsSearching(false);\n    }\n  };\n\n  // Initial load\n  useEffect(() => {\n    fetchMeetings(1);\n  }, []);\n\n  const handleSearch = () => {\n    setIsSearching(true);\n    setCurrentPage(1);\n    fetchMeetings(1);\n  };\n\n  const handleClearSearch = () => {\n    setSearchText('');\n    setStatusFilter('');\n    setCurrentPage(1);\n    setIsSearching(true);\n    fetchMeetings(1);\n  };\n\n  const handlePageChange = (page) => {\n    if (page >= 1 && page <= totalPages && page !== currentPage) {\n      fetchMeetings(page);\n    }\n  };\n\n  const handleCreateMeeting = () => {\n    navigate('/admin/meetings/create');\n  };\n\n  const handleEditMeeting = (meetingId) => {\n    navigate(`/admin/meetings/${meetingId}/edit`);\n  };\n\n  const handleViewMeeting = (meetingId) => {\n    navigate(`/admin/meetings/${meetingId}/view`);\n  };\n\n  const handleDeleteMeeting = async (meetingId, meetingTitle) => {\n    if (window.confirm(`Are you sure you want to delete the meeting \"${meetingTitle}\"? This action cannot be undone.`)) {\n      try {\n        await apiService.deleteMeeting(meetingId);\n        fetchMeetings(currentPage); // Refresh current page\n      } catch (error) {\n        setError(`Failed to delete meeting: ${error.message}`);\n      }\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n    try {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    } catch {\n      return 'Invalid date';\n    }\n  };\n\n  const getStatusBadge = (status) => {\n    const statusConfig = {\n      draft: { color: '#856404', bg: '#fff3cd', label: 'Draft' },\n      finalized: { color: '#155724', bg: '#d4edda', label: 'Finalized' },\n      archived: { color: '#721c24', bg: '#f8d7da', label: 'Archived' }\n    };\n    \n    const config = statusConfig[status] || statusConfig.draft;\n    return (\n      <span \n        className=\"status-badge\"\n        style={{ \n          color: config.color, \n          backgroundColor: config.bg,\n          padding: '0.25rem 0.5rem',\n          borderRadius: '0.25rem',\n          fontSize: '0.8rem',\n          fontWeight: '500'\n        }}\n      >\n        {config.label}\n      </span>\n    );\n  };\n\n  // Generate page numbers for pagination\n  const generatePageNumbers = () => {\n    const pages = [];\n    const maxVisiblePages = 5;\n    \n    if (totalPages <= maxVisiblePages) {\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      const startPage = Math.max(1, currentPage - 2);\n      const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n      \n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(i);\n      }\n      \n      if (endPage < totalPages) {\n        pages.push('...');\n      }\n    }\n    \n    return pages;\n  };\n\n  if (loading && !isSearching) {\n    return (\n      <div className=\"meeting-list-container\">\n        <div className=\"loading\">Loading meetings...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"meeting-list-container\">\n      {/* Header */}\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">Minutes of Meeting</h1>\n        <div className=\"page-info\">\n          {totalCount > 0 && (\n            <span className=\"total-count\">\n              Total: {totalCount} meetings\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Search Section */}\n      <div className=\"search-section\">\n        <div className=\"search-header\">\n          <h2>Search & Filter</h2>\n          <button className=\"clear-search-btn\" onClick={handleClearSearch}>\n            Clear Search\n          </button>\n        </div>\n        \n        <div className=\"search-filters\">\n          <div className=\"filter-group\">\n            <label>Search</label>\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or agenda...\"\n              value={searchText}\n              onChange={(e) => setSearchText(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n              className=\"search-input\"\n            />\n          </div>\n          \n          <div className=\"filter-group\">\n            <label>Status</label>\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              className=\"status-select\"\n            >\n              <option value=\"\">All Status</option>\n              <option value=\"draft\">Draft</option>\n              <option value=\"finalized\">Finalized</option>\n              <option value=\"archived\">Archived</option>\n            </select>\n          </div>\n          \n          <div className=\"search-button-container\">\n            <button \n              className=\"search-btn\" \n              onClick={handleSearch}\n              disabled={isSearching}\n            >\n              {isSearching ? 'Searching...' : 'Search'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"error-message\">\n          <span className=\"error-icon\">⚠️</span>\n          {error}\n        </div>\n      )}\n\n      {/* Meetings Table */}\n      <div className=\"meetings-table\">\n        {/* Table Headers */}\n        <div className=\"table-header\">\n          <div className=\"header-column\">MOM Number</div>\n          <div className=\"header-column\">Date</div>\n          <div className=\"header-column\">Location</div>\n          <div className=\"header-column\">Points</div>\n          <div className=\"header-column\">Attachment</div>\n          <div className=\"header-column\">Action Owner</div>\n          <div className=\"header-column actions-header\">\n            <button className=\"add-meeting-btn\" onClick={handleCreateMeeting}>\n              <span className=\"plus-icon\">+</span>\n              Add New Meeting\n            </button>\n          </div>\n        </div>\n\n        {/* Table Content */}\n        <div className=\"table-body\">\n          {loading && isSearching ? (\n            <div className=\"loading-row\">\n              <div className=\"loading-spinner\"></div>\n              <span>Searching meetings...</span>\n            </div>\n          ) : !Array.isArray(meetings) || meetings.length === 0 ? (\n            <div className=\"no-data\">\n              {error ? 'Failed to load meetings' : 'No meetings found'}\n              {(searchText || statusFilter) && (\n                <div className=\"no-data-suggestion\">\n                  Try adjusting your search criteria or <button onClick={handleClearSearch} className=\"link-btn\">clear all filters</button>\n                </div>\n              )}\n            </div>\n          ) : (\n            meetings.map((meeting) => (\n              <div key={meeting.id} className=\"table-row\">\n                <div className=\"data-column\">\n                  <div className=\"data-value\">{meeting.id || 'N/A'}</div>\n                </div>\n                <div className=\"data-column\">\n                  <div className=\"data-value\">{formatDate(meeting.meeting_date)}</div>\n                </div>\n                <div className=\"data-column\">\n                  <div className=\"data-value\">{meeting.location || 'Not specified'}</div>\n                </div>\n                <div className=\"data-column\">\n                  <div className=\"data-value\">\n                    <div className=\"meeting-title\">{meeting.title || 'Untitled'}</div>\n                    <div className=\"meeting-status\">{getStatusBadge(meeting.status)}</div>\n                  </div>\n                </div>\n                <div className=\"data-column\">\n                  <div className=\"data-value\">\n                    {meeting.attendees && meeting.attendees.length > 0 ? 'Yes' : 'No'}\n                  </div>\n                </div>\n                <div className=\"data-column\">\n                  <div className=\"data-value\">\n                    {meeting.action_items && meeting.action_items.length > 0 ? 'Yes' : 'No'}\n                  </div>\n                </div>\n                <div className=\"data-column actions-column\">\n                  <div className=\"action-buttons\">\n                    <button\n                      className=\"action-btn view-btn\"\n                      onClick={() => handleViewMeeting(meeting.id)}\n                      title=\"View Meeting\"\n                    >\n                      👁️\n                    </button>\n                    <button\n                      className=\"action-btn edit-btn\"\n                      onClick={() => handleEditMeeting(meeting.id)}\n                      title=\"Edit Meeting\"\n                    >\n                      ✏️\n                    </button>\n                    <button\n                      className=\"action-btn delete-btn\"\n                      onClick={() => handleDeleteMeeting(meeting.id, meeting.title)}\n                      title=\"Delete Meeting\"\n                    >\n                      🗑️\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"pagination\">\n          <div className=\"pagination-info\">\n            Page {currentPage} of {totalPages} ({totalCount} total items)\n          </div>\n          \n          <div className=\"pagination-controls\">\n            <button\n              className=\"page-btn prev-btn\"\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 1}\n            >\n              Previous\n            </button>\n            \n            {generatePageNumbers().map((pageNum, index) => (\n              <button\n                key={index}\n                onClick={() => typeof pageNum === 'number' && handlePageChange(pageNum)}\n                className={`page-btn ${currentPage === pageNum ? 'active' : ''} ${typeof pageNum !== 'number' ? 'dots' : ''}`}\n                disabled={typeof pageNum !== 'number'}\n              >\n                {pageNum}\n              </button>\n            ))}\n            \n            <button\n              className=\"page-btn next-btn\"\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage === totalPages}\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MeetingList;