import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './CreateMeeting.css';\nimport apiService from '../services/apiService';\n\nconst CreateMeeting = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    meeting_date: '',\n    attendees: [],\n    agenda: '',\n    minutes: '',\n    action_items: [],\n    next_meeting_date: '',\n    status: 'draft'\n  });\n\n  const [attendeeInput, setAttendeeInput] = useState('');\n  const [actionItemInput, setActionItemInput] = useState('');\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    // Trim whitespace and check for empty values\n    const trimmedTitle = (formData.title || '').trim();\n    const trimmedMeetingDate = (formData.meeting_date || '').trim();\n    const trimmedMinutes = (formData.minutes || '').trim();\n\n    if (!trimmedTitle) {\n      newErrors.title = 'Meeting title is required';\n    }\n\n    if (!trimmedMeetingDate) {\n      newErrors.meeting_date = 'Meeting date is required';\n    }\n\n    if (!trimmedMinutes) {\n      newErrors.minutes = 'Meeting minutes are required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const addAttendee = () => {\n    if (attendeeInput.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        attendees: [...prev.attendees, attendeeInput.trim()]\n      }));\n      setAttendeeInput('');\n    }\n  };\n\n  const removeAttendee = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      attendees: prev.attendees.filter((_, i) => i !== index)\n    }));\n  };\n\n  const addActionItem = () => {\n    if (actionItemInput.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        action_items: [...prev.action_items, {\n          item: actionItemInput.trim(),\n          assignee: '',\n          due_date: '',\n          status: 'pending'\n        }]\n      }));\n      setActionItemInput('');\n    }\n  };\n\n  const removeActionItem = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      action_items: prev.action_items.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateActionItem = (index, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      action_items: prev.action_items.map((item, i) => \n        i === index ? { ...item, [field]: value } : item\n      )\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Clear any existing errors before validation\n    setErrors({});\n    setError(null);\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Prepare the data\n      const meetingData = {\n        ...formData,\n        title: formData.title.trim(),\n        minutes: formData.minutes.trim(),\n        agenda: formData.agenda.trim(),\n        meeting_date: new Date(formData.meeting_date).toISOString(),\n        next_meeting_date: formData.next_meeting_date \n          ? new Date(formData.next_meeting_date).toISOString() \n          : null\n      };\n\n      const response = await apiService.createMeeting(meetingData);\n      \n      if (response) {\n        setSuccess(true);\n        setTimeout(() => {\n          navigate('/admin/meetings');\n        }, 1500);\n      }\n    } catch (error) {\n      // Handle validation errors from backend\n      if (error.message.includes('Validation failed') && error.response) {\n        try {\n          const errorData = JSON.parse(error.response);\n          if (errorData.errors && Array.isArray(errorData.errors)) {\n            const validationErrors = {};\n            errorData.errors.forEach(err => {\n              validationErrors[err.field] = err.message;\n            });\n            setErrors(validationErrors);\n            setError('Please fix the validation errors below.');\n            return;\n          }\n        } catch (parseError) {\n          // If parsing fails, just show the general error\n        }\n      }\n      \n      setError(error.message || 'Failed to create meeting. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    navigate('/admin/meetings');\n  };\n\n  if (success) {\n    return (\n      <div className=\"create-meeting\">\n        <div className=\"success-container\">\n          <div className=\"success-icon\">✓</div>\n          <h2>Meeting Created Successfully!</h2>\n          <p>The meeting \"{formData.title}\" has been created successfully.</p>\n          <p>Redirecting to meetings list...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"create-meeting\">\n      <div className=\"page-header\">\n        <div className=\"header-content\">\n          <button onClick={handleCancel} className=\"back-btn\">\n            ← Back to Meetings\n          </button>\n          <div className=\"header-info\">\n            <h1>Create New Meeting</h1>\n            <p>Add a new meeting minutes record</p>\n          </div>\n        </div>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n\n      <form onSubmit={handleSubmit} className=\"meeting-form\">\n        <div className=\"form-section\">\n          <h3>Basic Information</h3>\n          \n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Meeting Title *</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={handleInputChange}\n                className={`form-control ${errors.title ? 'error' : ''}`}\n                placeholder=\"Enter meeting title\"\n                disabled={loading}\n              />\n              {errors.title && <span className=\"error-text\">{errors.title}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"meeting_date\">Meeting Date *</label>\n              <input\n                type=\"date\"\n                id=\"meeting_date\"\n                name=\"meeting_date\"\n                value={formData.meeting_date}\n                onChange={handleInputChange}\n                className={`form-control ${errors.meeting_date ? 'error' : ''}`}\n                disabled={loading}\n              />\n              {errors.meeting_date && <span className=\"error-text\">{errors.meeting_date}</span>}\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"status\">Status</label>\n              <select\n                id=\"status\"\n                name=\"status\"\n                value={formData.status}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                disabled={loading}\n              >\n                <option value=\"draft\">Draft</option>\n                <option value=\"finalized\">Finalized</option>\n                <option value=\"archived\">Archived</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"next_meeting_date\">Next Meeting Date</label>\n              <input\n                type=\"date\"\n                id=\"next_meeting_date\"\n                name=\"next_meeting_date\"\n                value={formData.next_meeting_date}\n                onChange={handleInputChange}\n                className=\"form-control\"\n                disabled={loading}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3>Attendees</h3>\n          <div className=\"attendees-input\">\n            <input\n              type=\"text\"\n              value={attendeeInput}\n              onChange={(e) => setAttendeeInput(e.target.value)}\n              placeholder=\"Enter attendee name\"\n              className=\"form-control\"\n              onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addAttendee())}\n              disabled={loading}\n            />\n            <button type=\"button\" onClick={addAttendee} className=\"btn btn-secondary\" disabled={loading}>\n              Add Attendee\n            </button>\n          </div>\n          <div className=\"attendees-list\">\n            {formData.attendees.map((attendee, index) => (\n              <span key={index} className=\"attendee-tag\">\n                {attendee}\n                <button type=\"button\" onClick={() => removeAttendee(index)} className=\"remove-btn\" disabled={loading}>\n                  ×\n                </button>\n              </span>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3>Meeting Content</h3>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"agenda\">Agenda</label>\n            <textarea\n              id=\"agenda\"\n              name=\"agenda\"\n              value={formData.agenda}\n              onChange={handleInputChange}\n              className=\"form-control\"\n              placeholder=\"Enter meeting agenda\"\n              rows=\"4\"\n              disabled={loading}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"minutes\">Meeting Minutes *</label>\n            <textarea\n              id=\"minutes\"\n              name=\"minutes\"\n              value={formData.minutes}\n              onChange={handleInputChange}\n              className={`form-control ${errors.minutes ? 'error' : ''}`}\n              placeholder=\"Enter meeting minutes\"\n              rows=\"8\"\n              disabled={loading}\n            />\n            {errors.minutes && <span className=\"error-text\">{errors.minutes}</span>}\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3>Action Items</h3>\n          <div className=\"action-items-input\">\n            <input\n              type=\"text\"\n              value={actionItemInput}\n              onChange={(e) => setActionItemInput(e.target.value)}\n              placeholder=\"Enter action item\"\n              className=\"form-control\"\n              onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addActionItem())}\n              disabled={loading}\n            />\n            <button type=\"button\" onClick={addActionItem} className=\"btn btn-secondary\" disabled={loading}>\n              Add Action Item\n            </button>\n          </div>\n          <div className=\"action-items-list\">\n            {formData.action_items.map((item, index) => (\n              <div key={index} className=\"action-item\">\n                <div className=\"action-item-content\">\n                  <input\n                    type=\"text\"\n                    value={item.item}\n                    onChange={(e) => updateActionItem(index, 'item', e.target.value)}\n                    placeholder=\"Action item description\"\n                    className=\"form-control\"\n                    disabled={loading}\n                  />\n                  <input\n                    type=\"text\"\n                    value={item.assignee}\n                    onChange={(e) => updateActionItem(index, 'assignee', e.target.value)}\n                    placeholder=\"Assignee\"\n                    className=\"form-control\"\n                    disabled={loading}\n                  />\n                  <input\n                    type=\"date\"\n                    value={item.due_date}\n                    onChange={(e) => updateActionItem(index, 'due_date', e.target.value)}\n                    className=\"form-control\"\n                    disabled={loading}\n                  />\n                  <select\n                    value={item.status}\n                    onChange={(e) => updateActionItem(index, 'status', e.target.value)}\n                    className=\"form-control\"\n                    disabled={loading}\n                  >\n                    <option value=\"pending\">Pending</option>\n                    <option value=\"in_progress\">In Progress</option>\n                    <option value=\"completed\">Completed</option>\n                  </select>\n                </div>\n                <button type=\"button\" onClick={() => removeActionItem(index)} className=\"remove-btn\" disabled={loading}>\n                  ×\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"form-actions\">\n          <button type=\"button\" onClick={handleCancel} className=\"btn btn-secondary\" disabled={loading}>\n            Cancel\n          </button>\n          <button type=\"submit\" disabled={loading} className=\"btn btn-primary\">\n            {loading ? (\n              <>\n                <span className=\"spinner\"></span>\n                Creating Meeting...\n              </>\n            ) : (\n              'Create Meeting'\n            )}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateMeeting;